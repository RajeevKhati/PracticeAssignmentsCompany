// <auto-generated />
using System;
using Company.Project.EventDomain.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Company.Project.EventDomain.Migrations
{
    [DbContext(typeof(EventDomainDbContext))]
    [Migration("20210928172711_AddedIdentity")]
    partial class AddedIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EventID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DurationInHours")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("TitleOfBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("2e34a494-5967-4433-aa5b-a4846236a308"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "mahim",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 181, DateTimeKind.Unspecified).AddTicks(9562), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "positivity",
                            Type = false,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("c868a3ae-5a2b-43ea-ac85-75efa83a37f4"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "bandra",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 182, DateTimeKind.Unspecified).AddTicks(1170), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "war",
                            Type = false,
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("ec3b919d-7025-4898-a7e2-b36483132c65"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "dadar",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 182, DateTimeKind.Unspecified).AddTicks(1231), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "21 days",
                            Type = false,
                            UserID = 5
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("6bc39e0d-d0bd-40b4-a007-0e5f84e8ae7c"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vasai",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 182, DateTimeKind.Unspecified).AddTicks(1236), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rudest book ever",
                            Type = false,
                            UserID = 5
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("0a1c3e1d-1f22-4464-afab-9f621cef2d3c"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vile parle",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 182, DateTimeKind.Unspecified).AddTicks(1240), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rag to rich",
                            Type = false,
                            UserID = 6
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("b46846df-486a-431d-8a33-f3f4cc8417a5"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "naigaon",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 182, DateTimeKind.Unspecified).AddTicks(1244), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rich dad poor dad",
                            Type = false,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("EventsAndPeople");

                    b.HasData(
                        new
                        {
                            PersonID = 1,
                            EventID = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GUID = new Guid("1daaad12-ed45-4ee0-9c0c-b9aaa73c0dea"),
                            Id = 0,
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 182, DateTimeKind.Unspecified).AddTicks(1631), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            PersonID = 2,
                            EventID = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GUID = new Guid("dffaf8a9-acb5-477c-aa70-0a37d818b363"),
                            Id = 0,
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 182, DateTimeKind.Unspecified).AddTicks(2316), new TimeSpan(0, 5, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "adarsh@gmail.com",
                            FullName = "adarsh singhai",
                            GUID = new Guid("01908f6a-c596-4809-bd3b-c4917dc955bd"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 179, DateTimeKind.Unspecified).AddTicks(445), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "raj@gmail.com",
                            FullName = "raj chakra",
                            GUID = new Guid("07eaab66-4c99-4ac4-822c-f0797be0d6f8"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 181, DateTimeKind.Unspecified).AddTicks(8973), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sanket@yahoo.com",
                            FullName = "sanket jain",
                            GUID = new Guid("7a8dee8c-1bfd-425b-903e-6ee8adc6241a"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 181, DateTimeKind.Unspecified).AddTicks(9041), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "himanshu@yahoo.com",
                            FullName = "himanshu jain",
                            GUID = new Guid("a24209e4-c159-4e96-9824-29bd030e3c5d"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 181, DateTimeKind.Unspecified).AddTicks(9047), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "deepanshu@gmail.com",
                            FullName = "deepanshu jain",
                            GUID = new Guid("273712a5-0ca2-4d83-a97f-ff128f5e8579"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 181, DateTimeKind.Unspecified).AddTicks(9051), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dheeraj@zoho.com",
                            FullName = "dheeraj jain",
                            GUID = new Guid("658ad1d1-00ed-4e37-b03d-a5100a0672fc"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 22, 57, 11, 181, DateTimeKind.Unspecified).AddTicks(9055), new TimeSpan(0, 5, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Comment", b =>
                {
                    b.HasOne("Company.Project.EventDomain.Domain.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.HasOne("Company.Project.EventDomain.Domain.Event", "Event")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Project.EventDomain.Domain.Person", "Person")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
