// <auto-generated />
using System;
using Company.Project.EventDomain.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Company.Project.EventDomain.Migrations
{
    [DbContext(typeof(EventDomainDbContext))]
    [Migration("20210928113459_AddedEventColumnsAndCommentTable")]
    partial class AddedEventColumnsAndCommentTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EventID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DurationInHours")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("TitleOfBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("ae9c2cf4-dbcb-4c8b-9ab8-568e71bc5b79"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "mahim",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(1221), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "positivity",
                            Type = false,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("6c6df98b-38e9-4fa8-8aac-5476d941a919"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "bandra",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(2351), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "war",
                            Type = false,
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("20f6b53b-e569-4afe-8bbf-7fb577b1d814"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "dadar",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(2405), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "21 days",
                            Type = false,
                            UserID = 5
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("21771663-e828-4ed9-9de2-738c52e1066e"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vasai",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(2409), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rudest book ever",
                            Type = false,
                            UserID = 5
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("77bde19f-8fc5-4489-b99a-f7503e83098f"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vile parle",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(2413), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rag to rich",
                            Type = false,
                            UserID = 6
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("d0ba40df-ec71-4575-a6f1-658db318ea3e"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "naigaon",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(2417), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rich dad poor dad",
                            Type = false,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("EventsAndPeople");

                    b.HasData(
                        new
                        {
                            PersonID = 1,
                            EventID = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GUID = new Guid("8e254b3e-5191-46aa-ac6e-356f5ad2e500"),
                            Id = 0,
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(2692), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            PersonID = 2,
                            EventID = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GUID = new Guid("944ed77e-6679-495c-8287-b37a1e8a3299"),
                            Id = 0,
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(3184), new TimeSpan(0, 5, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "adarsh@gmail.com",
                            FullName = "adarsh singhai",
                            GUID = new Guid("aea7381a-edb0-4eb9-b928-46555a905adf"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 966, DateTimeKind.Unspecified).AddTicks(8203), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "raj@gmail.com",
                            FullName = "raj chakra",
                            GUID = new Guid("54f9c957-03b9-4003-8e62-5bf9916f0701"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(826), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sanket@yahoo.com",
                            FullName = "sanket jain",
                            GUID = new Guid("6c32211a-30eb-479c-9034-9a4c05da865d"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(882), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "himanshu@yahoo.com",
                            FullName = "himanshu jain",
                            GUID = new Guid("e57766b3-5e4b-44e0-8e30-0e281051348f"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(887), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "deepanshu@gmail.com",
                            FullName = "deepanshu jain",
                            GUID = new Guid("5878ed5a-83c6-43ba-aa69-776a17e3daff"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(890), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dheeraj@zoho.com",
                            FullName = "dheeraj jain",
                            GUID = new Guid("974e564d-6c0f-4c13-b5ff-2b86b7df6e8d"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 4, 58, 969, DateTimeKind.Unspecified).AddTicks(892), new TimeSpan(0, 5, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Comment", b =>
                {
                    b.HasOne("Company.Project.EventDomain.Domain.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.HasOne("Company.Project.EventDomain.Domain.Event", "Event")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Project.EventDomain.Domain.Person", "Person")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
