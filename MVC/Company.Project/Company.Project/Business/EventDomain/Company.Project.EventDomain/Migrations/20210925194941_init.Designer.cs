// <auto-generated />
using System;
using Company.Project.EventDomain.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Company.Project.EventDomain.Migrations
{
    [DbContext(typeof(EventDomainDbContext))]
    [Migration("20210925194941_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TitleOfBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GUID = new Guid("a8467e01-cbe7-4fe2-a644-4529f4185aaa"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "mahim",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(3882), new TimeSpan(0, 5, 30, 0, 0)),
                            TitleOfBook = "positivity",
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GUID = new Guid("7498c51f-e7ed-4e84-89ba-3545d71cc9de"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "bandra",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(5162), new TimeSpan(0, 5, 30, 0, 0)),
                            TitleOfBook = "war",
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GUID = new Guid("3bb73d53-c9ca-4af6-990e-d319543d5550"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "dadar",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(5227), new TimeSpan(0, 5, 30, 0, 0)),
                            TitleOfBook = "21 days",
                            UserID = 5
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GUID = new Guid("8e357081-bbe6-461f-8e7d-fcf2e4e72f8d"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vasai",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(5232), new TimeSpan(0, 5, 30, 0, 0)),
                            TitleOfBook = "rudest book ever",
                            UserID = 5
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GUID = new Guid("48b13cfa-cbe5-4d6f-a5ce-25c052269b0f"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vile parle",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(5235), new TimeSpan(0, 5, 30, 0, 0)),
                            TitleOfBook = "rag to rich",
                            UserID = 6
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GUID = new Guid("36abfa40-f10b-4c7a-86d1-874f8036e5e5"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "naigaon",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(5238), new TimeSpan(0, 5, 30, 0, 0)),
                            TitleOfBook = "rich dad poor dad",
                            UserID = 3
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.HasKey("PersonID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("EventsAndPeople");

                    b.HasData(
                        new
                        {
                            PersonID = 1,
                            EventID = 2
                        },
                        new
                        {
                            PersonID = 2,
                            EventID = 3
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "adarsh@gmail.com",
                            FullName = "adarsh singhai",
                            GUID = new Guid("9608df64-6cb0-4ccf-bd82-0617d544525b"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 525, DateTimeKind.Unspecified).AddTicks(2265), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "raj@gmail.com",
                            FullName = "raj chakra",
                            GUID = new Guid("5ee3bd89-6375-4e7a-9aa1-db9c46fb4f92"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(3504), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sanket@yahoo.com",
                            FullName = "sanket jain",
                            GUID = new Guid("0865eefd-96f5-4cb2-9a5a-dfbb1acdf314"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(3552), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "himanshu@yahoo.com",
                            FullName = "himanshu jain",
                            GUID = new Guid("90751c8f-2767-4314-8e61-2c956b4a18e6"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(3557), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "deepanshu@gmail.com",
                            FullName = "deepanshu jain",
                            GUID = new Guid("60491969-e7a4-45ed-960b-5dd139891b42"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(3559), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dheeraj@zoho.com",
                            FullName = "dheeraj jain",
                            GUID = new Guid("58218d60-ff1c-4c50-b0d2-0c13b86ecff0"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 26, 1, 19, 41, 527, DateTimeKind.Unspecified).AddTicks(3563), new TimeSpan(0, 5, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.HasOne("Company.Project.EventDomain.Domain.Event", "Event")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Project.EventDomain.Domain.Person", "Person")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
