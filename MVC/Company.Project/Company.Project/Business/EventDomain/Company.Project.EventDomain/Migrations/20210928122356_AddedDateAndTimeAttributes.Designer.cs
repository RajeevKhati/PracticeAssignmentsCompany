// <auto-generated />
using System;
using Company.Project.EventDomain.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Company.Project.EventDomain.Migrations
{
    [DbContext(typeof(EventDomainDbContext))]
    [Migration("20210928122356_AddedDateAndTimeAttributes")]
    partial class AddedDateAndTimeAttributes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EventID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DurationInHours")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("TitleOfBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("e7507e5d-972b-4b47-9066-88a25f8e9c7b"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "mahim",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(7360), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "positivity",
                            Type = false,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("942da320-f0d0-4dd1-9109-2bf5bab982c7"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "bandra",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(9171), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "war",
                            Type = false,
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("21d02769-9587-454d-a5ae-cbdfda72b696"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "dadar",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(9231), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "21 days",
                            Type = false,
                            UserID = 5
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("466fbead-f90f-43c7-85c7-3bf4f046fe81"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vasai",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(9235), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rudest book ever",
                            Type = false,
                            UserID = 5
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("48347c4e-b74c-4c32-bda2-3574c96d3ba6"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "vile parle",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(9239), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rag to rich",
                            Type = false,
                            UserID = 6
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationInHours = 0,
                            GUID = new Guid("9605ba54-a9d9-4dba-80e7-bc6a014e0852"),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "naigaon",
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(9253), new TimeSpan(0, 5, 30, 0, 0)),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TitleOfBook = "rich dad poor dad",
                            Type = false,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("EventsAndPeople");

                    b.HasData(
                        new
                        {
                            PersonID = 1,
                            EventID = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GUID = new Guid("c3e82b9a-29b3-48f6-adab-ea43ae0dbedb"),
                            Id = 0,
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(9605), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            PersonID = 2,
                            EventID = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GUID = new Guid("5716844b-8c1a-4bdf-b144-23bc13b430e9"),
                            Id = 0,
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 503, DateTimeKind.Unspecified).AddTicks(175), new TimeSpan(0, 5, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "adarsh@gmail.com",
                            FullName = "adarsh singhai",
                            GUID = new Guid("f2f8ca18-897e-4325-b9c0-3f1c645ab180"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 500, DateTimeKind.Unspecified).AddTicks(3076), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "raj@gmail.com",
                            FullName = "raj chakra",
                            GUID = new Guid("d0af2852-5cc1-475f-8e91-b11e381e67fa"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(6656), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sanket@yahoo.com",
                            FullName = "sanket jain",
                            GUID = new Guid("869d765a-89c7-4983-ad1d-2637f36e33c8"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(6724), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "himanshu@yahoo.com",
                            FullName = "himanshu jain",
                            GUID = new Guid("ae1dfe9a-f65c-4a0b-9974-573722bdc2fd"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(6729), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "deepanshu@gmail.com",
                            FullName = "deepanshu jain",
                            GUID = new Guid("bf5bb279-01f7-4bf2-94d4-a10ad4f41e03"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(6732), new TimeSpan(0, 5, 30, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserID = 0,
                            CreatedOnDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dheeraj@zoho.com",
                            FullName = "dheeraj jain",
                            GUID = new Guid("656f3121-d311-4b29-865f-6b835e0f734c"),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByUserID = 0,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2021, 9, 28, 17, 53, 55, 502, DateTimeKind.Unspecified).AddTicks(6735), new TimeSpan(0, 5, 30, 0, 0))
                        });
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.Comment", b =>
                {
                    b.HasOne("Company.Project.EventDomain.Domain.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Project.EventDomain.Domain.EventAndPerson", b =>
                {
                    b.HasOne("Company.Project.EventDomain.Domain.Event", "Event")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Project.EventDomain.Domain.Person", "Person")
                        .WithMany("EventsAndPeople")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
